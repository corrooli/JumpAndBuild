/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java-library'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // The JaCoCo plugin provides code coverage metrics for Java code via integration with JaCoCo.
    id 'jacoco'

    // Import JavaFX
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.2-jre'

    // ZIP dependency
    implementation 'net.lingala.zip4j:zip4j:2.6.4'

    // JSON dependency
    implementation 'org.json:json:20200518'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'

    // add mockito core to mock some parts of the application
    testImplementation 'org.mockito:mockito-core:3.6.0'

    // https://mvnrepository.com/artifact/org.skyscreamer/jsonassert
    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'

}

application {
    mainClassName = 'ch.zhaw.pm3.teamretro.ui.JumpAndBuild'
}


task(runGame, dependsOn: 'classes', type: JavaExec) {
    main = 'ch.zhaw.pm3.teamretro.ui.JumpAndBuild'
    classpath = sourceSets.main.runtimeClasspath

    // If needed:
    //args 'my program args'
    //systemProperty 'simple.message', 'Hello'
}

task(runEditor, dependsOn: 'classes', type: JavaExec) {
    main = 'ch.zhaw.pm3.teamretro.ui.Editor'
    classpath = sourceSets.main.runtimeClasspath
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}


jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

javafx {
    version = "14"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

defaultTasks 'runGame'
